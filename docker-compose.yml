services:
  db:
    image: postgres:15-alpine
    container_name: worldscars-db
    environment:
      POSTGRES_DB: worldscars
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - worldscars-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: worldscars-backend
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_USERNAME=${DATABASE_USERNAME:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
    networks:
      - worldscars-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/test"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: worldscars-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8080}
    networks:
      - worldscars-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  worldscars-network:
    driver: bridge
